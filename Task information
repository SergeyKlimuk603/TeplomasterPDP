https://help.salesforce.com/s/articleView?id=000386042&type=1
"
Optimizing the view state best practice

Minimize the number of forms on a page: Assume a page contains two forms - form 1 and form 2. Irrespective of which form the user submits and causes a post back, the view state for the page needs to get transferred. To support this, each form on your page will have its own copy of view state. If the associated view state is large, instead of having multiple forms on a page, have a single form and use <apex:actionRegion> to submit portions of the form. This will ensure that only a single copy of the view state is associated with that page.
Минимизируйте количество форм на странице: предположим, что страница содержит две формы — форму 1 и форму 2. Независимо от того, какую форму пользователь отправляет и вызывает обратную публикацию, состояние просмотра страницы должно быть передано. Для этого каждая форма на вашей странице будет иметь собственную копию состояния просмотра. Если связанное состояние просмотра велико, вместо нескольких форм на странице создайте одну форму и используйте <apex:actionRegion> для отправки частей формы. Это гарантирует, что только одна копия состояния просмотра будет связана с этой страницей.
Declare variable as transient: An instance variable declared as transient is not saved and is not transmitted as part of the view state. If a certain field is needed only for the duration of the page request and does not need to be part of the view state, declare it as transient.
Объявить переменную как переходную: переменная экземпляра, объявленная как временная, не сохраняется и не передается как часть состояния представления. Если определенное поле необходимо только на время запроса страницы и не должно быть частью состояния просмотра, объявите его временным.
Recreate state versus storing it in view state: View state should ideally contain only work in progress data e.g. current object being edited, multi-page wizard data etc. If you can reconstruct the data during postback, via a SOQL query or a web services call, implement that instead of storing it in controller data members.
Воссоздавать состояние вместо сохранения его в состоянии просмотра: в идеале состояние просмотра должно содержать только данные о незавершенной работе, например. редактируемый текущий объект, данные многостраничного мастера и т. д. Если вы можете реконструировать данные во время обратной передачи с помощью запроса SOQL или вызова веб-службы, реализуйте это вместо сохранения в элементах данных контроллера.
Use custom objects or custom settings to store large quantities of read-only data: Let us say that your controller needs to call a web service and parse a large response object. Storing it in view state may increase the page size. Marking it as transient would incur the cost of an additional web service call and parsing it again. In such cases, you could store the parsed response in a custom object and just use the stored record id to get to the parsed response. Custom settings provide another mechanism to cache data needed by your controller. Accessing custom settings is faster than access to custom objects since custom settings are part of your application's cache and does not require a database query to retrieve the data.
Используйте настраиваемые объекты или настраиваемые параметры для хранения больших объемов данных только для чтения: допустим, вашему контроллеру необходимо вызвать веб-службу и проанализировать большой объект ответа. Сохранение его в состоянии просмотра может увеличить размер страницы. Пометка его как временного повлечет за собой затраты на дополнительный вызов веб-службы и повторный анализ. В таких случаях вы можете сохранить проанализированный ответ в пользовательском объекте и просто использовать сохраненный идентификатор записи, чтобы получить проанализированный ответ. Пользовательские настройки предоставляют еще один механизм кэширования данных, необходимых вашему контроллеру. Доступ к пользовательским настройкам выполняется быстрее, чем доступ к пользовательским объектам, поскольку пользовательские настройки являются частью кэша вашего приложения и не требуют запроса к базе данных для извлечения данных.
Refine your SOQL to only retrieve the data needed by the page: Only retrieve (and store) the fields you need and also filter the data to only retrieve data needed by the page.
Усовершенствуйте свой SOQL, чтобы получать только данные, необходимые странице: извлекайте (и сохраняйте) только те поля, которые вам нужны, а также фильтруйте данные, чтобы получать только данные, необходимые странице.
Refactor your pages to make its view stateless: Instead of using apex:commandLink or apex:commandButton components (which needs to be inside a apex:form component) to invoke an action, use an apex:outputLink or other non action method instead and implement the action through an apex:page action attribute - where it makes sense.
Рефакторинг ваших страниц, чтобы сделать его представление без состояния: вместо использования компонентов apex:commandLink или apex:commandButton (которые должны находиться внутри компонента apex:form) для вызова действия используйте apex:outputLink или другой метод без действия и реализуйте действие через атрибут действия apex:page — там, где это имеет смысл.
Consider doing your own state management in certain case: In certain cases you may want to bypass the view state mechanism offered by Visualforce and do your own state management. In such cases, use a HTML FORM instead of apex:form. This technique is useful to deal with Visualforce pages that may have to be served to mobile devices where the view state may be too large for the embedded browsers. 
В некоторых случаях рассмотрите возможность собственного управления состоянием. В некоторых случаях может потребоваться обойти механизм состояния представления, предлагаемый Visualforce, и выполнить собственное управление состоянием. В таких случаях используйте HTML FORM вместо apex:form. Этот метод полезен для работы со страницами Visualforce, которые, возможно, придется обслуживать на мобильных устройствах, где состояние просмотра может быть слишком большим для встроенных браузеров.
"